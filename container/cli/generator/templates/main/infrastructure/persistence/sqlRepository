package <%= package %>;

import org.springframework.stereotype.Service;
import <%= package_domain %>.<%= entity %>;
import <%= package_domain %>.<%= entity_id %>;
import <%= package_domain %>.<%= entity_repository %>;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public final class <%= class_name %> implements <%= entity_repository %> {
    private final <%= entity %>JpaRepository crudRepository;

    public <%= class_name %>(<%= entity %>JpaRepository crudRepository) {
        this.crudRepository = crudRepository;
    }

    @Override
    public void save(<%= entity %> entity) {
        crudRepository.save(new <%= entity_dao %>(entity));
    }

    @Override
    public void saveAll(List<<%= entity %>> entities) {
        Iterable<<%= entity_dao %>> iterables = entities.stream().map(<%= entity_dao %>::new).collect(Collectors.toList());
        crudRepository.saveAll(iterables);
    }

    @Override
    public Optional<<%= entity %>> findById(<%= entity_id %> id) {
        Optional<<%= entity_dao %>> entityDao = crudRepository.findById(id.value());
        return entityDao.map(<%= entity_dao %>::toDomain);
    }

    @Override
    public List<<%= entity %>> findAll() {
        return map(crudRepository.findAll());
    }

    @Override
    public List<<%= entity %>> findAllById(List<<%= entity_id %>> ids) {
        Iterable<String> iterables = ids.stream().map(<%= entity_id %>::value).collect(Collectors.toList());
        return map(crudRepository.findAllById(iterables));
    }

    @Override
    public void deleteById(<%= entity_id %> id) {
        crudRepository.deleteById(id.value());
    }

    private List<<%= entity %>> map(List<<%= entity_dao %>> daoList) {
        return daoList.stream().map(<%= entity_dao %>::toDomain).collect(Collectors.toList());
    }
}
